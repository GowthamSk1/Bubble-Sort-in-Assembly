# GOWTHAM
.data
array: .word  97,9,171,81,27,162,9,120,167,24,63,192,121,191,110,173,161,173,151,164,66,122,103,178,53,90,91,3,88,51,195,45,111,129,61,105,78,175,91,113,69,119,103,86,65,25,11,106,164,97,180,91,110,137,120,90,113,190,51,31,167,11,167,174,106,159,29,37,57,54,111,161,174,157,123,128,196,131,142,8,76,116,196,50,103,63,66,64,155,166,115,142,130,112,134,103,134,142,109,190,74,112,169,75,112,165,174,164,75,182,10,14,186,164,190,19,85,145,47,158,103,33,34,63,136,81,20,123,0,98,110,22,44,161,84,123,91,72,17,66,149,157,150,133,132,66,29,6,176,119,173,61,121,146,150,74,155,76,82,27,126,103,160,114,175,35,97,9,19,95,11,109,95,111,54,128,151,35,58,193,151,69,153,107,191,131,168,196,110,99,165,136,53,4,12,139,82,196,16,6,53,37,44,185,81,103,150,158,99,78,130,107,18,69,77,197,159,129,179,144,108,19,119,24,129,134,34,52,78,96,130,92,186,131,106,53,55,5,199,85,58,140,180,170,133,153,17,107,132,159,200,93,33,20,50,180,91,58,56,103,183,74,108,166,48,85,87,134,175,197,81,193,92,45,130,136,176,33,166,31,165,172,34,122,169,4,186,167,98,102,36,115,53,176,82,81,67,140,160,19,194,72,9,96,96,18,52,8,100,60,135,74,111,15,117,19,180,125,167,184,133,157,18,39,81,27,64,35,197,110,29,49,160,91,63,152,42,56,63,36,86,147,113,110,49,10,181,120,12,92,43,141,9,81,46,55,193,36,32,15,2,141,172,60,34,48,170,57,114,77,57,150,189,69,144,161,139,31,145,80,36,181,160,41,9,48,121,182,32,50,36,123,101,11,69,120,104,169,134,127,2,123,97,186,34,194,146,59,52,61,21,106,187,156,191,67,81,144,127,7,59,56,36,31,110,5,41,61,139,155,198,188,171,194,149,22,180,23,90,58,131,129,179,1,180,17,72,144,123,70,159,165,26,69,11,114,33,38,133,144,107,19,190,123,118,182,37,124,4,46,109,112,84,59,84,91,149,127,111,72,8,67,20,67,96,177,61,191,194,105,120,137,192,123,119,89,37,195,200,111
.text
main: 	
	la $s1, array  			
	# Sort the array by calling the selectionSort subrouti
	move $a0, $s1  			 # $a0 = address of array from $s1 r
	li $a1, 500			 # $a1 = the size of the array
	jal bubblesort  			 # call bubble sort subroutine
	li $v0, 10			# EXIT PROGRAM
	syscall
																	
#bubblesort sort
############################ SWAP ################################
swap:	sll	$t1, $a1, 2		# $t1 = k * 4
	add	$t1, $a0, $t1		# $t1 = v + (k * 4)
	lw	$t0, ($t1)		# load the two values
	lw	$t2, 4($t1)
	sw	$t2, ($t1)		# store (swap) the two values
	sw	$t0, 4($t1)
	jr	$ra
############################ SORT ################################
bubblesort:	addi	$sp, $sp, -8	# push 5 registers onto stack
	sw	$ra, 4($sp)
	sw	$s1, 0($sp)
	move	$s2, $a0	# save $a0
	move	$s3, $a1	# save $a1
	# outer loop
	move	$s0, $zero	# i = 0
for1tst: slt	$t0, $s0, $s3	# check if i < n
	beq	$t0, $zero, exit1
	# inner loop
	addi	$s1, $s0, -1	# j = i - 1
for2tst: slti	$t0, $s1, 0	# check if j < 0
	bne	$t0, $zero, exit2
	sll	$t1, $s1, 2	# j * 4
	add	$t2, $s2, $t1	# v + j * 4
	lw	$t3, ($t2)	# v[j]
	lw	$t4, 4($t2)	# v[j+1]
	slt	$t0, $t4, $t3	# need to swap?
	beq	$t0, $zero, exit2
	# swap
	move	$a0, $s2
	move	$a1, $s1
	jal	swap
	addi	$s1, $s1, -1	# j --
	j	for2tst
	# end of inner loop
exit2: 	addi	$s0, $s0, 1	# i++
	j	for1tst
	# end of outer loop
exit1:		# pop (restore) registers
	lw	$s1, 0($sp)
	lw	$ra, 4($sp)
	addi	$sp, $sp, 8
	jr	$ra	
